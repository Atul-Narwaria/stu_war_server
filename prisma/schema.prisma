generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "users", "locations", "students", "teacher", "institute"]
}

model designation {
  id        String   @id @default(uuid()) @db.Uuid
  roles     String   @unique
  status    Boolean  @default(true)
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model country {
  id               String             @id @default(uuid()) @db.Uuid
  CounrtyName      String             @unique
  status           Boolean            @default(true)
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  state            state[]
  studentAddress   studentAddress[]
  teacherAddress   teacherAddress[]
  instituteAddress instituteAddress[]
  city             city[]

  @@schema("locations")
}

model state {
  id               String             @id @default(uuid()) @db.Uuid
  stateName        String             @unique
  country          country            @relation(fields: [fkCountryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkCountryId      String             @db.Uuid
  status           Boolean            @default(true)
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  city             city[]
  studentAddress   studentAddress[]
  teacherAddress   teacherAddress[]
  instituteAddress instituteAddress[]

  @@index([fkCountryId])
  @@schema("locations")
}

model city {
  id               String             @id @default(uuid()) @db.Uuid
  cityName         String
  country          country            @relation(fields: [fkCountryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkCountryId      String             @db.Uuid
  state            state              @relation(fields: [fkstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkstateId        String             @db.Uuid
  status           Boolean            @default(true)
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  studentAddress   studentAddress[]
  teacherAddress   teacherAddress[]
  instituteAddress instituteAddress[]

  @@index([fkstateId])
  @@schema("locations")
}

model admin {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  status    Boolean  @default(true)
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("users")
}

model studentMaster {
  id                      String                    @id @default(uuid()) @db.Uuid
  firstName               String
  lastName                String
  email                   String                    @unique
  phone                   String                    @unique
  password                String
  gender                  String
  dob                     DateTime                  @db.Date
  admissionId             String                    @unique
  profileImg              String?
  status                  Boolean                   @default(true)
  instituteMasterId       instituteMaster           @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_institute_id         String                    @db.Uuid
  password_reset          Boolean                   @default(false)
  createAt                DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  studentDetail           studentDocuments[]
  studentAddress          studentAddress[]
  batchLink               batchLink[]
  StudentCourse           StudentCourse[]
  assignmentWork          assignmentWork[]
  batchStudentsAssignment batchStudentsAssignment[]

  @@schema("students")
}

model studentDocuments {
  id          String        @id @default(uuid()) @db.Uuid
  StudentId   studentMaster @relation(fields: [fkStudentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkStudentId String        @db.Uuid
  category    String
  docUrl      String
  status      Boolean       @default(true)
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("students")
}

model studentAddress {
  id          String        @id @default(uuid()) @db.Uuid
  StudentId   studentMaster @relation(fields: [fkStudentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkStudentId String        @db.Uuid
  country     country       @relation(fields: [fkcountryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkcountryId String        @db.Uuid
  state       state         @relation(fields: [fkstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkstateId   String        @db.Uuid
  city        city          @relation(fields: [fkcityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkcityId    String        @db.Uuid
  Address     String
  pin         String
  status      Boolean       @default(true)
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([fkStudentId])
  @@schema("students")
}

model teacherMaster {
  id                String             @id @default(uuid()) @db.Uuid
  firstName         String
  lastName          String
  email             String             @unique
  phone             String             @unique
  gender            String
  dob               DateTime           @db.Date
  profileImg        String?
  joiningDate       DateTime           @default(now()) @db.Date
  password          String
  password_reset    Boolean            @default(false)
  instituteMasterId instituteMaster    @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_institute_id   String             @db.Uuid
  status            Boolean            @default(true)
  onMaintaince      Boolean            @default(false)
  createAt          DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  teacherDocuments  teacherDocuments[]
  teacherAddress    teacherAddress[]
  teacherExprience  teacherExprience[]
  batchTeacherLink  batchTeacherLink[]
  batchAssignments  batchAssignments[]

  @@schema("teacher")
}

model teacherExprience {
  id          String        @id @default(uuid()) @db.Uuid
  TeacherId   teacherMaster @relation(fields: [fkTeacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkTeacherId String        @db.Uuid
  skills      Json[]
  experience  String
  status      Boolean       @default(true)
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("teacher")
}

model teacherDocuments {
  id          String        @id @default(uuid()) @db.Uuid
  TeacherId   teacherMaster @relation(fields: [fkTeacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkTeacherId String        @db.Uuid
  category    String
  docUrl      String
  status      Boolean       @default(true)
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@schema("teacher")
}

model teacherAddress {
  id          String        @id @default(uuid()) @db.Uuid
  TeacherId   teacherMaster @relation(fields: [fkTeacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkTeacherId String        @db.Uuid
  country     country       @relation(fields: [fkcountryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkcountryId String        @db.Uuid
  state       state         @relation(fields: [fkstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkstateId   String        @db.Uuid
  city        city          @relation(fields: [fkcityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkcityId    String        @db.Uuid
  Address     String
  pin         String
  status      Boolean       @default(true)
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([fkTeacherId])
  @@schema("teacher")
}

model instituteMaster {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  code             String             @unique
  email            String             @unique
  phone            String             @unique
  profileImg       String?
  status           Boolean            @default(true)
  onMaintaince     Boolean            @default(false)
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  instituteAddress instituteAddress[]
  instituteLogin   instituteLogin[]
  studentMaster    studentMaster[]
  batchMaster      batchMaster[]
  teacherMaster    teacherMaster[]
  batchLink        batchLink[]
  courses          courses[]
  subCourses       subCourses[]
  assignmentMaster assignmentMaster[]
  events           events[]

  @@schema("institute")
}

model instituteAddress {
  id              String          @id @default(uuid()) @db.Uuid
  fk_institute_id String          @db.Uuid
  instituteMaster instituteMaster @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  country         country         @relation(fields: [fkcountryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkcountryId     String          @db.Uuid
  state           state           @relation(fields: [fkstateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkstateId       String          @db.Uuid
  city            city            @relation(fields: [fkcityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fkcityId        String          @db.Uuid
  Address         String
  pin             String
  status          Boolean         @default(true)
  createAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@schema("institute")
}

model instituteLogin {
  id                  String          @id @default(uuid()) @db.Uuid
  fk_institute_id     String          @db.Uuid
  instituteMaster     instituteMaster @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password            String
  maintaince_password String
  status              Boolean         @default(true)
  createAt            DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@schema("institute")
}

model batchMaster {
  id               String             @id @default(uuid()) @db.Uuid
  fk_institute_id  String             @db.Uuid
  instituteMaster  instituteMaster    @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_sub_course_id String             @db.Uuid
  subCourses       subCourses         @relation(fields: [fk_sub_course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name             String
  start_time       String
  end_time         String
  weekdays         String
  haveLiveClass    Boolean            @default(false)
  status           Boolean            @default(true)
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  batchLink        batchLink[]
  batchTeacherLink batchTeacherLink[]
  batchLiveClass   batchLiveClass?
  batchAssignments batchAssignments[]

  @@schema("institute")
}

model batchLink {
  id              String          @id @default(uuid()) @db.Uuid
  fk_institute_id String          @db.Uuid
  instituteMaster instituteMaster @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_student_id   String          @db.Uuid
  stundetmaster   studentMaster   @relation(fields: [fk_student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_bacth_id     String          @db.Uuid
  bactch          batchMaster     @relation(fields: [fk_bacth_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status          Boolean         @default(true)
  createAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([fk_bacth_id, fk_student_id])
  @@schema("institute")
}

model courses {
  id              String          @id @default(uuid()) @db.Uuid
  fk_institute_id String          @db.Uuid
  instituteMaster instituteMaster @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name            String          @unique
  amount          Int
  image           String
  description     String
  durantion       Int
  status          Boolean         @default(true)
  createAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  courselinks     courselinks[]
  StudentCourse   StudentCourse[]

  @@schema("institute")
}

model subCourses {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  amount          Int
  image           String
  description     String
  fk_institute_id String           @db.Uuid
  institute_is    instituteMaster  @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  duration        Int
  status          Boolean          @default(true)
  createAt        DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  courselinks     courselinks[]
  batchMaster     batchMaster[]
  StudentCourse   StudentCourse[]
  assignmentWork  assignmentWork[]

  @@unique([name])
  @@schema("institute")
}

model courselinks {
  id               String     @id @default(uuid()) @db.Uuid
  fk_course_id     String     @db.Uuid
  courses          courses    @relation(fields: [fk_course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_sub_course_id String     @db.Uuid
  subCourses       subCourses @relation(fields: [fk_sub_course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt         DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@unique([fk_course_id, fk_sub_course_id])
  @@schema("institute")
}

model StudentCourse {
  id               String        @id @default(uuid()) @db.Uuid
  fk_stundet_id    String        @db.Uuid
  category         Int
  createAt         DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  stundetmaster    studentMaster @relation(fields: [fk_stundet_id], references: [id], onDelete: Cascade)
  fk_course_id     String?       @db.Uuid
  courses          courses?      @relation(fields: [fk_course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_sub_course_id String?       @db.Uuid
  subCourses       subCourses?   @relation(fields: [fk_sub_course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([fk_stundet_id, category, fk_course_id, fk_sub_course_id])
  @@schema("institute")
}

model assignmentType {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  status           Boolean
  createAt         DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  assignmentMaster assignmentMaster[]

  @@schema("institute")
}

model assignmentMaster {
  id                 String           @id @default(uuid()) @db.Uuid
  name               String           @unique
  fk_assignment_type String           @db.Uuid
  assignmenttype     assignmentType   @relation(fields: [fk_assignment_type], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_institute_id    String           @db.Uuid
  end_date           String
  repeat             Boolean          @default(false)
  institute_is       instituteMaster  @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status             Boolean          @default(false)
  createAt           DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  assignmentWork     assignmentWork[]

  @@schema("institute")
}

model assignmentWork {
  id                     String           @id @default(uuid()) @db.Uuid
  fk_assignmentmaster_id String           @db.Uuid
  assignmentMaster       assignmentMaster @relation(fields: [fk_assignmentmaster_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_sub_course_id       String?          @db.Uuid
  subCourses             subCourses?      @relation(fields: [fk_sub_course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_stundet_id          String           @db.Uuid
  stundetmaster          studentMaster    @relation(fields: [fk_stundet_id], references: [id], onDelete: Cascade)
  remarks                String?
  submissionDate         DateTime         @db.Date
  work                   String
  createAt               DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  @@schema("institute")
}

model batchTeacherLink {
  id            String        @id @default(uuid()) @db.Uuid
  fk_teacher_id String        @db.Uuid
  fk_batch_id   String        @db.Uuid
  teacherId     teacherMaster @relation(fields: [fk_teacher_id], references: [id], onDelete: Cascade)
  batchId       batchMaster   @relation(fields: [fk_batch_id], references: [id], onDelete: Cascade)
  createAt      DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([fk_batch_id, fk_teacher_id])
  @@schema("institute")
}

model batchLiveClass {
  id             String      @id @default(uuid()) @db.Uuid
  topic          String
  start_time     String
  duration       String
  password       String
  meeting_number String      @default("null")
  meeting_url    String
  fk_batch_id    String      @db.Uuid
  batchId        batchMaster @relation(fields: [fk_batch_id], references: [id], onDelete: Cascade)
  createAt       DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([fk_batch_id])
  @@schema("institute")
}

model events {
  id              String          @id @default(uuid()) @db.Uuid
  name            String
  category        String
  isleave         Boolean
  status          Boolean
  date            DateTime        @db.Date
  fk_institute_id String          @db.Uuid
  instituteMaster instituteMaster @relation(fields: [fk_institute_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([fk_institute_id, name])
  @@schema("public")
}

model batchAssignments {
  id                      String                    @id @default(uuid()) @db.Uuid
  fk_teacher_id           String                    @db.Uuid
  teacherMaster           teacherMaster             @relation(fields: [fk_teacher_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_batch_id             String                    @db.Uuid
  batchMaster             batchMaster               @relation(fields: [fk_batch_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contents                String?
  media                   String?
  name                    String
  assignment_date         DateTime                  @db.Date
  submission_date         DateTime                  @db.Date
  createAt                DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  batchStudentsAssignment batchStudentsAssignment[]

  @@schema("institute")
}

model batchStudentsAssignment {
  id                     String           @id @default(uuid()) @db.Uuid
  fk_student_id          String           @db.Uuid
  studenntMaster         studentMaster    @relation(fields: [fk_student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_batch_assignment_id String           @db.Uuid
  batchAssignemnt        batchAssignments @relation(fields: [fk_batch_assignment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contents               String?
  media                  String?
  submission_date        DateTime         @db.Date
  createAt               DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  @@unique([fk_batch_assignment_id, fk_student_id])
  @@schema("institute")
}
